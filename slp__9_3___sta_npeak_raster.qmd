---
title: "STA Plots"
format: html
editor: visual
jupyter: python3
---

## Configuration

```{r, setup, include = FALSE}
knitr::opts_knit$set(root.dir = 'Z:/Layton/Sleep_083023')
```

```{r}
library(tidyverse)
library(ggh4x)
library(dplyr)
library(purrr)
library(cowplot)
```

## Parameters

```{r}
sta_data_path <- 'Cache/Subject05/Jul13/S05_Jul13_spike_sw_coupling.csv'
legui_path <- 'Cache/Subject05/S05_electrodes.csv'
response_path <- 'Cache/Subject05/Jul13/S05_unit_response.csv'
sw_form_path <- 'Cache/Subject05/Jul13/S05_event_epochs.csv'

npeak_facet_output <- 'Results/S05_Jul13_sta_npeak_facet_AMY-RAM1.svg'
npeak_single_output <- 'Results/S05_Jul13_sta_npeak_single_AMY-RAM1.svg'
```

```{r}
ipsilateral_pairs_only <- TRUE

# Select 'CLA' or 'AMY'
# S05: Mostly L CLA and R AMY units
micro_region <- c('AMY')

# Options:
# S05 R AMY = RAM1
# S05 L OFC = LOF1, LOF3
# S05 R OFC = ROF1, ROF2
selected_channel <- c('RAM1')

# Options:
# S05 Jul13 AMY-RAM1 = S05_Ch236_neg_Unit5
# S05 Jul13 CLA-LOF1 = S05_Ch195_neg_Unit5
selected_unit <- c('S05_Ch236_neg_Unit5')
```

```{r}
raster_color <- 
  case_when(
  micro_region == 'CLA' ~ '#e8a2c5',
  micro_region == 'ACC' ~ '#805553',
  micro_region == 'AMY' ~ '#7da58a',
  TRUE ~ NA)

wave_color <- 
  case_when(
  micro_region == 'CLA' ~ 'black',
  micro_region == 'AMY' ~ '#7da58a',
  TRUE ~ NA)
```

## Munging

```{r}
# SW-Phase-Envelope data
data <- 
  read.csv(sta_data_path) %>%
  mutate(laterality = ifelse(unit_laterality == channel_side,
                             'Ipsilateral', 'Contralateral')) %>%
  dplyr::select(sw_id, unit_id, channel_id, laterality,
                start, end, phase, negative_peak, positive_peak)

colnames(data) <- c('sw_id', 'unit_id', 'chan_id', 'laterality',  
                    'start', 'end', 'phase', 'npeak', 'ppeak')

# LeGUI
legui <- 
  read.csv(legui_path) %>%
  dplyr::select(elec_label, YBA, roi_3, roi_4, lobe_1)

colnames(legui) <- c('chan_id', 'YBA', 'chan_region', 
                     'chan_region_2', 'lobe')

# Unit Responsiveness
response <- 
  read.csv(response_path) %>%
  dplyr::select(unit, unit_roi, response_type)

colnames(response) <- c('unit_id', 'unit_region', 'response')

# Merge datasets
data <- merge(data, legui, by = 'chan_id')
data <- merge(data, response, by = 'unit_id')

rm(legui, response)
gc()

# Create non-laterality unit region
data$unit_region_2 <- sub(".* ", "", data$unit_region)

# Reformat unit ID
data <-
  data %>%
  mutate(unit_id_2 = paste0(unit_region_2, '_',
                          as.numeric(as.factor(unit_id))))

# Keep only ipsilateral pairs
if(ipsilateral_pairs_only == TRUE){
  data <- data[data$laterality == 'Ipsilateral',]
}

# Select only relevant units & channel
data <- 
  data %>%
  filter(unit_region_2 %in% micro_region) %>%
  filter(chan_id == selected_channel)

# Renumber the sw_id's to be unique within each
# unit_id to prepare for raster plotting
data <- data %>%
    group_by(unit_id) %>%
    arrange(unit_id, sw_id) %>%
    mutate(sw_id = dense_rank(sw_id))
```

## Negative Peak Raster Plots

```{r}
# Take only the average SW waveform from the selected channel
sw_form <- 
  read.csv(sw_form_path) %>%
  filter(channel == selected_channel) %>% 
  filter(condition == 'slow_wave')

# Calculate Min-Max for Each unit_id
range_data <- data %>%
  group_by(unit_id) %>%
  summarise(min_sw_id = min(sw_id), max_sw_id = max(sw_id))

# Normalize sw waveform value for each unit_id; then combine
final_sw_form <- map_df(unique(data$unit_id), ~{
  unit_id <- .x
  
  # Get the min and max for this unit_id
  min_max <- filter(range_data, unit_id == .x)
  
  # Scale sw_form
  scaled <- sw_form %>%
    mutate(scaled_value = (value - min(value)) / (max(value) - min(value)) * (min_max$max_sw_id - min_max$min_sw_id) + min_max$min_sw_id,
           unit_id = unit_id)
  
  return(scaled)
})
```

## Facet Plot

```{r}
ggplot(data, aes(x = npeak)) +
    geom_point(aes(y = sw_id), shape = 15, 
               size = 0.1, alpha = 0.1, color = raster_color) +
    geom_line(data = final_sw_form, 
              aes(x = time, y = scaled_value), 
              size = 1, alpha = 0.5, color = wave_color) +
    facet_wrap(~ unit_id, scales = 'free_y') +
    scale_x_continuous(limits = c(-2, 2), expand = c(0, 0)) +
    scale_y_continuous(expand = c(0, 0)) +
    labs(x = 'Time (s)', y = 'Slow Wave (#) / Amplitude (uV)') +
    theme_minimal() +
    theme(panel.spacing = unit(0.2, 'lines'), 
          axis.title = element_text(size = 14),
          axis.text = element_text(size = 10),
          axis.ticks = element_line(size = 0.4),
          strip.text = element_text(size = 8), 
          legend.title = element_blank(),
          legend.text = element_text(size = 10), 
          panel.grid.major = element_blank(),
          panel.grid.minor = element_blank(), 
          panel.border = element_rect(colour = 'black', 
                                      fill = NA, 
                                      size = 1))

ggsave(file = npeak_facet_output, width = 10, height = 7, dpi = 300, limitsize = FALSE)
```

## Single Plot

```{r}
ggplot(data[data$unit_id == selected_unit,], 
       aes(x = npeak)) +
    geom_point(aes(y = sw_id), shape = 15, 
               size = 0.1, alpha = 0.3, color = raster_color) +
    geom_line(data = final_sw_form[final_sw_form$unit_id == selected_unit,], 
              aes(x = time, y = scaled_value), 
              size = 1, alpha = 1, color = wave_color) +
    scale_x_continuous(limits = c(-2, 2), expand = c(0, 0)) +
    scale_y_continuous(expand = c(0, 0)) +
    labs(x = 'Time (s)', y = 'Slow Wave (#) / Amplitude (uV)') +
    theme_minimal() +
    theme(panel.spacing = unit(0.2, 'lines'), 
          axis.title = element_text(size = 14),
          axis.text = element_text(size = 10),
          axis.ticks = element_line(size = 0.4),
          strip.text = element_text(size = 8), 
          legend.title = element_blank(),
          legend.text = element_text(size = 10), 
          panel.grid.major = element_blank(),
          panel.grid.minor = element_blank(), 
          panel.border = element_rect(colour = 'black', 
                                      fill = NA, 
                                      size = 1))

ggsave(file = npeak_single_output, width = 3, height = 2.5, dpi = 300, limitsize = FALSE)
```

---
title: "Unit Response"
format: html
editor: visual
jupyter: python3
---

## Configuration

```{r, setup, include = FALSE}
knitr::opts_knit$set(root.dir = 'Z:/Layton/Sleep_083023')
```

```{r}
library(tidyverse)
library(magrittr)
```

## Parameters

```{r}
hyp_path <- 'Cache/Subject01/Feb02/S01_hyp_correlation.csv'
swa_path <- 'Cache/Subject01/Feb02/S01_swa_correlation_10s.csv'
sw_path <- 'Cache/Subject01/Feb02/S01_sw_correlation_10s.csv'

sw_heatmap_out_path <- 'Cache/Subject01/Feb02/S01_unit_heatmap_sw.csv'
swa_heatmap_out_path <- 'Cache/Subject01/Feb02/S01_unit_heatmap_swa.csv'
response_out_path <- 'Cache/Subject01/Feb02/S01_unit_response.csv'
```

## Munging

```{r}
hyp <- 
  read.csv(hyp_path) %>%
  #filter(unit_region == 'CLA') %>%
  mutate(corr = ifelse(rho > 0, 'pos', 'neg')) %>%
  mutate(signif = ifelse(fdr_rho_p_value < 0.01, 1, 0)) %>%
  mutate(n23 = case_when(corr == 'pos' & signif == 1 ~ 'Pos',
                         corr == 'neg' & signif == 1 ~ 'Neg',
                         signif == 0 ~ 'None')) %>% 
  select(unit_id, n23) %>%
  set_colnames(c('unit', 'n23'))
```

```{r}
swa <- 
  read.csv(swa_path) %>%
  mutate(correlation = ifelse(rho > 0, 'pos', 'neg'),
         laterality = ifelse(unit_laterality == channel_laterality,
                             'Ipsilateral', 'Contralateral'),
         unit_laterality = ifelse(unit_laterality == 'left', 'L', 'R'),
         unit_roi = paste(unit_laterality, unit_region, sep = ' ')) %>%
  select(unit_id, unit_roi, unit_region, channel, roi_4, lobe_1, 
         laterality, correlation, rho, fdr_rho_p_value) %>%
  set_colnames(c('unit', 'unit_roi', 'unit_label', 'chan', 'chan_roi', 'chan_label',
                 'laterality', 'direction', 'rho', 'pval')) %>%
  mutate(metric = 'SWA')
```

```{r}
sw <- 
  read.csv(sw_path) %>%
  mutate(correlation = ifelse(rho > 0, 'pos', 'neg'),
         laterality = ifelse(unit_laterality == channel_laterality,
                             'Ipsilateral', 'Contralateral'),
         unit_laterality = ifelse(unit_laterality == 'left', 'L', 'R'),
         unit_roi = paste(unit_laterality, unit_region, sep = ' ')) %>%
  select(unit_id, unit_roi, unit_region, channel, roi_4, lobe_1, 
         laterality, correlation, rho, fdr_rho_p_value) %>%
  set_colnames(c('unit', 'unit_roi', 'unit_label', 'chan', 'chan_roi', 'chan_label',
                 'laterality', 'direction', 'rho', 'pval')) %>%
  mutate(metric = 'SW')
```

```{r}
# Export for heatmap plotting
write.csv(sw, sw_heatmap_out_path, row.names = FALSE)
write.csv(swa, swa_heatmap_out_path, row.names = FALSE)
```

## Responsiveness Criteria

```{r}
df <- 
  rbind(sw, swa) %>%
  mutate(metric = factor(metric, levels = c('N2 & N3', 'SWA', 'SW')),
         laterality = factor(laterality, 
                             levels = c('Ipsilateral', 'Contralateral')),
         signif = ifelse(pval < 0.01, 1, 0)) %>%
  pivot_wider(id_cols = c(unit, unit_roi, chan, chan_roi, laterality, metric),
              names_from = direction,
              values_from = signif,
              values_fill = 0) %>%
  mutate(response = case_when(pos == 1 & neg == 1 ~ 'Both',
                              pos == 1 & neg == 0 ~ 'Pos',
                              pos == 0 & neg == 1 ~ 'Neg',
                              pos == 0 & neg == 0 ~ 'None')) %>% 
  mutate(response = factor(response, levels = c('Pos', 'Both', 'Neg', 'None'))) %>%
  group_by(unit, unit_roi, laterality) %>%
  mutate(sort_value = sum(pos) - sum(neg))

df <-
  df %>% 
  merge(., hyp, by = 'unit')
```

```{r}
df <- 
  df %>%
  #filter(n23 != 'None') %>%
  # Only consider ipsilateral channels when
  # determining responsiveness (optional)
  filter(laterality == 'Ipsilateral') %>%
  group_by(unit, unit_roi, metric) %>%
  # Percent responsiveness among all channels
  summarize(pos = sum(pos) / length(unique(chan_roi)),
            neg = sum(neg) / length(unique(chan_roi))) %>%
  mutate(percent = pmax(pos, neg),
         direction = ifelse(pos > neg, 'pos', 'neg')) %>%
  pivot_wider(id_cols = c(unit, unit_roi), 
              names_from = metric, 
              values_from = c(percent, direction)) %>%
  mutate(response_type = case_when(
    (direction_SWA != direction_SW) ~ 'None',
    (percent_SWA >= 0.5) & (percent_SW >= 0.5) & 
      (direction_SWA == 'pos') ~ 'Positive',
    (percent_SWA >= 0.5) & (percent_SW >= 0.5) & 
      (direction_SWA == 'neg') ~ 'Negative',
    TRUE ~ 'None')) %>%
  # Remove units with opposite response types
  #filter(direction_SWA == direction_SW) %>%
  # Keep units responsive to more than half 
  # of all channels in SWA and SW's
  #filter((percent_SWA >= 0.5) & (percent_SW >= 0.5)) %>%
  # Assign final response type
  #mutate(response_type = 
  #         ifelse(direction_SWA == 'pos', 
  #                'Positive', 'Negative')) %>%
  select(unit, unit_roi, percent_SWA, percent_SW, response_type)

write.csv(df, response_out_path, row.names = FALSE)
```

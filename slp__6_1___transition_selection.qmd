---
title: "Channel Spectrograms"
format: html
editor: visual
jupyter: python3
---

## Configuration

```{r, setup, include = FALSE}
knitr::opts_knit$set(root.dir = 'Z:/Layton/Sleep_083023')
```

```{r}
library(tidyverse)
library(viridis)
library(wesanderson)
```

## Parameters

The example_channel will be manually specified based on your manual review of the best spectrogram plot from the output of slp\_\_6_6\_\_\_spectrogram_plots.qmd.

```{r}
#tfr_path <- 'Cache/Subject01/S01_tfr_30s_epochs.csv'
#example_channel <- 'ROF1'

tfr_path <- 'Cache/Subject05/Jul13/S05_tfr_30s_epochs.csv'
example_channel <- 'LOF9'
```

## Munging

```{r}
tfr <- read.csv(tfr_path)

tfr <- 
  tfr %>%
  mutate(minutes = ((epoch + 1) * 30) / 60) %>%
  select(channel, minutes, frequency, 
         logmpower_freq, logpower_freq, 
         lmpf_zscore, lpf_zscore) %>%
  drop_na() # drop scalp leads if present
```

```{r}
scale_min <- -5; scale_max <- 5

wa_palette <- wes_palette("Zissou1", 100, 
                          type = "continuous")
```

## Plotting

You will need to manually change the x_intercept until you find each sleep transition.

```{r}
x_intercept <- 180

ggplot(tfr[tfr$channel == example_channel,], 
       aes(x = minutes, y = frequency)) +
  geom_raster(aes(fill = logmpower_freq),
              alpha = 0.75, interpolate = TRUE) +
  geom_vline(xintercept = x_intercept) +
  scale_fill_gradientn(colors = c('blue', 'white', 'red'),
                     limit = c(scale_min, scale_max),
                     oob = scales::squish) + 
  scale_x_continuous(expand = c(0, 0)) +
  scale_y_continuous(breaks = c(5, 10, 15, 20),
                     expand = c(0, 0)) +
  labs(y = 'icEEG', 
       fill = 'Log Power (dB)') +
  theme_minimal() + 
  theme(legend.text = element_text(size = 10),
        axis.title.x = element_blank(),
        axis.title.y = element_text(size = 13),
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank(),
        axis.ticks.y = element_line(size = 0.3),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.border = element_rect(colour = 'black', 
                                    fill = NA, 
                                    size = 1))
```

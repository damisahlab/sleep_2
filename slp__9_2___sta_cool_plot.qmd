---
title: "STA Plots"
format: html
editor: visual
jupyter: python3
---

## Configuration

```{r, setup, include = FALSE}
knitr::opts_knit$set(root.dir = 'Z:/Layton/Sleep_083023')
```

```{r}
library(tidyverse)
library(ggh4x)
library(CircMLE)
library(CircStats)   # For Rayleigh test
library(circular)    # For circular mean calculation
library(circlize)
library(dplyr)
library(purrr)
library(cowplot)

#install.packages('devtools')
#install_github("jokergoo/ComplexHeatmap")
library(ComplexHeatmap)
```

## Parameters

```{r}
# sta_data_path <- 'Cache/Subject01/Feb02/S01_spike_sw_coupling.csv'
# legui_path <- 'Cache/Subject01/Feb02/S01_electrodes.csv'
# response_path <- 'Cache/Subject01/Feb02/S01_unit_response.csv'
# coolplot_output <- 'Results/S01_coolplot.svg'

sta_data_path <- 'Cache/Subject05/Jul12/S05_Jul12_spike_sw_coupling.csv'
legui_path <- 'Cache/Subject05/S05_electrodes.csv'
response_path <- 'Cache/Subject05/Jul12/S05_unit_response.csv'
coolplot_output <- 'Results/S05_Jul12_coolplot.svg'

big_sw_only <- FALSE
ipsilateral_pairs_only <- TRUE
micro_regions <- c('CLA', 'ACC', 'AMY')
micro_colors <- c('#E28DB8', '#A67A77', '#7BA387')
```

## Munging

```{r}
# SW-Phase-Envelope data
data <- 
  read.csv(sta_data_path) %>%
  mutate(laterality = ifelse(unit_laterality == channel_side,
                             'Ipsilateral', 'Contralateral')) %>%
  dplyr::select(unit_id, channel_id, laterality,
                start, end, phase, zamp_npeak, zamp_ptp)

colnames(data) <- c('unit_id', 'chan_id', 'laterality',  
                    'start', 'end', 'phase', 'npeak', 'ptp')

# LeGUI
legui <- 
  read.csv(legui_path) %>%
  dplyr::select(elec_label, YBA, roi_3, roi_4, lobe_1)

colnames(legui) <- c('chan_id', 'YBA', 'chan_region', 
                     'chan_region_2', 'lobe')

# Unit Responsiveness
response <- 
  read.csv(response_path) %>%
  dplyr::select(unit, unit_roi, response_type)

colnames(response) <- c('unit_id', 'unit_region', 'response')

# Merge datasets
data <- merge(data, legui, by = 'chan_id')
data <- merge(data, response, by = 'unit_id')

rm(legui, response)
gc()

# Create non-laterality unit region
data$unit_region_2 <- sub(".* ", "", data$unit_region)

# Reformat unit ID
data <-
  data %>%
  mutate(unit_id_2 = paste0(unit_region_2, '_',
                          as.numeric(as.factor(unit_id))))

# Keep only ipsilateral pairs
if(ipsilateral_pairs_only == TRUE){
  data <- data[data$laterality == 'Ipsilateral',]
}

# Keep only SW's where the negative peak zscore < 0 (i.e. large)
if(big_sw_only == TRUE){
  data <- data[data$ptp > 0,]
}
```

## Circular Statistics - Rayleigh

```{r}
# 1. Apply the Rayleigh test and calculate mean resultant vector 
rayleigh <- data %>%
  group_by(unit_id, unit_id_2, unit_region_2, response,
           chan_id, YBA, chan_region, lobe) %>%
  summarise(
    p_value = rayleigh.test(circular(phase))$p.value, 
    mean_angle = as.numeric(mean.circular(circular(phase, units="radians"), na.rm = TRUE)),
    .groups = 'drop'
  )

# 2. Adjust the p-values using the Benjamini-Hochberg method
rayleigh <- rayleigh %>%
  mutate(p_adj = p.adjust(p_value, method = "BH"))

# Generate a dataset with the p-value and the preferred phase angle
phase_info <- rayleigh %>%
  dplyr::select(unit_id, unit_id_2, unit_region_2, response,
                chan_id, chan_region, lobe, mean_angle, p_adj)

# 3. Filter the pairs with adjusted p-values below 0.01
sig_pairs <- phase_info %>%
  filter(p_adj < 0.01)
```

```{r}
sig_pairs <- sig_pairs %>%
  group_by(chan_region) %>%
  mutate(unique_num = match(chan_id, unique(chan_id))) %>%
  mutate(chan_id_2 = if(n_distinct(chan_id) > 1) {
            paste(chan_region, paste0('Ch', unique_num), sep = "_")
          } else {
            as.character(chan_region)
          }) %>%
  dplyr::select(-unique_num) %>% 
  ungroup()

# Calculate the mean phase angle for each unit_region_2
mean_angles <- sig_pairs %>%
  group_by(unit_region_2, chan_id, chan_id_2, chan_region) %>%
  summarise(mean_phase = as.numeric(circular::mean.circular(circular(mean_angle, units = "radians"), na.rm = TRUE))) %>%
  ungroup()
```

## Cool Plot

```{r}
sig_pairs <- sig_pairs %>%
  arrange(chan_region, lobe, chan_id_2) %>%
  mutate(chan_id_2 = factor(chan_id_2, levels = unique(chan_id_2)))

mean_angles <- sig_pairs %>%
  group_by(chan_region, unit_region_2) %>% 
  summarize(mean_mean_angle = mean(mean_angle, na.rm = TRUE))

unit_color_vector <- c('CLA' = '#e8a2c5', 'ACC' = '#805553', 'AMY' = '#7da58a')
```

```{r}
ggplot() +
  geom_point(data = sig_pairs, 
             aes(x = mean_angle, y = chan_region, 
                 color = unit_region_2),
             size = 3, alpha = 0.5) + 
  geom_point(data = mean_angles, 
             aes(x = mean_mean_angle, y = chan_region, 
                 fill = unit_region_2), 
             color = 'black', shape = 23, size = 4) +
  scale_color_manual(values = unit_color_vector) +
  scale_fill_manual(values = unit_color_vector) +
  scale_x_continuous(breaks = c(seq(-pi, pi, pi/2)), 
                     labels = c('-π', '-π/2', '0', 'π/2', 'π'),
                     limits = c(-pi, pi),
                     expand = c(0.01, 0)) +
  labs(x = "Mean Angle (radians)", y = "Channel") + 
  theme_minimal() + 
  theme(legend.position = 'none',
        panel.spacing = unit(0.2, 'lines'), 
        axis.title = element_text(size = 18),
        axis.text = element_text(size = 14),
        axis.ticks = element_line(size = 0.5),
        panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        panel.border = element_rect(colour = 'black', 
                                    fill = NA, 
                                    size = 1))

ggsave(file = coolplot_output, width = 8, height = 5, dpi = 300)
```

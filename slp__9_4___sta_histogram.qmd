---
title: "STA Plots"
format: html
editor: visual
jupyter: python3
---

## Configuration

```{r, setup, include = FALSE}
knitr::opts_knit$set(root.dir = 'Z:/Layton/Sleep_083023')
```

```{r}
library(tidyverse)
library(ggh4x)
library(CircMLE)
library(CircStats)   # For Rayleigh test
library(circular)    # For circular mean calculation
library(circlize)
library(dplyr)
library(purrr)
library(cowplot)
```

## Parameters

```{r}
# sta_data_path <- 'Cache/Subject01/Feb02/S01_spike_sw_coupling.csv'
# legui_path <- 'Cache/Subject01/Feb02/S01_electrodes.csv'
# response_path <- 'Cache/Subject01/Feb02/S01_unit_response.csv'
# histo_pair_output <- 'Results/S01_sta_histo_pair.svg'

sta_data_path <- 'Cache/Subject05/Jul13/S05_Jul13_spike_sw_coupling.csv'
legui_path <- 'Cache/Subject05/S05_electrodes.csv'
response_path <- 'Cache/Subject05/Jul13/S05_unit_response.csv'
histo_pair_output <- 'Results/S05_Jul13_histo_LOF1-Ch195-neg-u5.svg'
```

```{r}
big_sw_only <- FALSE
ipsilateral_pairs_only <- TRUE

micro_regions <- c('CLA', 'ACC', 'AMY')
micro_colors <- c('#E28DB8', '#A67A77', '#7BA387')

# S01 R ??? = 'ROF12' ?
# S05 L OFC = LOF1, LOF3
selected_channel <- 'LOF1'
selected_unit <- 'S05_Ch195_neg_Unit5'
```

## Munging

```{r}
# SW-Phase-Envelope data
data <- 
  read.csv(sta_data_path) %>%
  mutate(laterality = ifelse(unit_laterality == channel_side,
                             'Ipsilateral', 'Contralateral')) %>%
  dplyr::select(unit_id, channel_id, laterality,
                start, end, phase, zamp_npeak, zamp_ptp)

colnames(data) <- c('unit_id', 'chan_id', 'laterality',  
                    'start', 'end', 'phase', 'npeak', 'ptp')

# LeGUI
legui <- 
  read.csv(legui_path) %>%
  dplyr::select(elec_label, YBA, roi_3, roi_4, lobe_1)

colnames(legui) <- c('chan_id', 'YBA', 'chan_region', 
                     'chan_region_2', 'lobe')

# Unit Responsiveness
response <- 
  read.csv(response_path) %>%
  dplyr::select(unit, unit_roi, response_type)

colnames(response) <- c('unit_id', 'unit_region', 'response')

# Merge datasets
data <- merge(data, legui, by = 'chan_id')
data <- merge(data, response, by = 'unit_id')

rm(legui, response)
gc()

# Create non-laterality unit region
data$unit_region_2 <- sub(".* ", "", data$unit_region)

# Reformat unit ID
data <-
  data %>%
  mutate(unit_id_2 = paste0(unit_region_2, '_',
                          as.numeric(as.factor(unit_id))))

# Keep only ipsilateral pairs
if(ipsilateral_pairs_only == TRUE){
  data <- data[data$laterality == 'Ipsilateral',]
}

# Keep only SW's where the negative peak zscore < 0 (i.e. large)
if(big_sw_only == TRUE){
  data <- data[data$ptp > 0,]
}
```

## Circular Statistics - Rayleigh

```{r}
# 1. Apply the Rayleigh test and calculate mean resultant vector 
rayleigh <- data %>%
  group_by(unit_id, unit_id_2, unit_region_2, response,
           chan_id, YBA, chan_region, lobe) %>%
  summarise(
    p_value = rayleigh.test(circular(phase))$p.value, 
    mean_angle = as.numeric(mean.circular(circular(phase, units="radians"), na.rm = TRUE)),
    .groups = 'drop'
  )

# 2. Adjust the p-values using the Benjamini-Hochberg method
rayleigh <- rayleigh %>%
  mutate(p_adj = p.adjust(p_value, method = "BH"))

# Generate a dataset with the p-value and the preferred phase angle
phase_info <- rayleigh %>%
  dplyr::select(unit_id, unit_id_2, unit_region_2, response,
                chan_id, chan_region, lobe, mean_angle, p_adj)

# 3. Filter the pairs with adjusted p-values below 0.01
sig_pairs <- phase_info %>%
  filter(p_adj < 0.01)
```

```{r}
sig_pairs <- sig_pairs %>%
  group_by(chan_region) %>%
  mutate(unique_num = match(chan_id, unique(chan_id))) %>%
  mutate(chan_id_2 = if(n_distinct(chan_id) > 1) {
            paste(chan_region, paste0('Ch', unique_num), sep = "_")
          } else {
            as.character(chan_region)
          }) %>%
  dplyr::select(-unique_num) %>% 
  ungroup()

# Calculate the mean phase angle for each unit_region_2
mean_angles <- sig_pairs %>%
  group_by(unit_region_2, chan_id, chan_id_2, chan_region) %>%
  summarise(mean_phase = as.numeric(circular::mean.circular(circular(mean_angle, units = "radians"), na.rm = TRUE))) %>%
  ungroup()
```

## Phase Histogram

```{r}
# best_pair <- 
#   phase_info %>%
#   filter(unit_region_2 == 'CLA' & 
#          chan_id == selected_channel) %>%
#   filter(p_adj == min(p_adj)) %>%
#   slice(1)
#
# best_pair_data <- 
#   data %>%
#   filter(start >= 0 & end <= 0) %>%
#   filter(unit_id == best_pair$unit_id) %>%
#   filter(chan_id == best_pair$chan_id)
# 
# print(paste("Best Pair chan_id:", best_pair$chan_id))
# print(paste("Best Pair unit_id:", best_pair$unit_id))

best_pair <- 
  phase_info %>%
  filter(unit_id == selected_unit & 
         chan_id == selected_channel)
  
best_pair_data <- 
  data %>%
  filter(start >= 0 & end <= 0) %>%
  filter(unit_id == selected_unit & 
         chan_id == selected_channel)
```

```{r}
bin_width <- (2 * pi) / 30

best_pair_histo <- 
  ggplot(data = best_pair_data, 
         aes(x = phase)) +
  geom_histogram(bins = 30, binwidth = bin_width, boundary = -pi,
                 fill = '#E28DB8', alpha = 0.75) + 
  scale_x_continuous(breaks = c(seq(-pi, pi, pi/2)), 
                     labels = c('-π', '-π/2', '0', 'π/2', 'π'),
                     expand = c(0, 0)) +
  scale_y_continuous(expand = c(0, 0)) +
  labs(y = 'Spike count (n)') + 
  theme_classic() + 
  theme(axis.title.x = element_blank(),
        axis.title.y = element_text(size = 14),
        axis.text = element_text(size = 8),
        axis.ticks = element_line(size = 0.4),
        legend.position = 'None',
        legend.title = element_blank(),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank())
```

```{r}
# Define the idealized SW function
sw_fx <- function(x) {cos(x)}

# Plotting the function using ggplot
best_pair_sw <- 
  ggplot(data.frame(x = c(-pi, pi)), aes(x = x)) +
  geom_hline(yintercept = 0, linetype = "dashed", 
           color = "black", alpha = 0.2) +
  stat_function(fun = sw_fx) +
  scale_x_continuous(breaks = c(seq(-pi, pi, pi/2)), 
                     labels = c('-\u03c0', '-\u03c0/2', '0', 
                                '\u03c0/2', '\u03c0'),
                     expand = c(0, 0)) +
  scale_y_continuous(breaks = c(-1, 0, 1)) + 
  theme_classic() + 
  labs(x = 'Phase (radians)', 
       y = 'SW amplitude (a.u.)') + 
  theme(axis.title = element_text(size = 14))
```

```{r}
# Combine the plots with cowplot
plot_grid(best_pair_histo, best_pair_sw, 
          ncol = 1, rel_heights = c(2.5, 1), align = 'v')

ggsave(file = histo_pair_output, width = 5, height = 5, 
       dpi = 300)
```

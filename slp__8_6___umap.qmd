---
title: "UMAP"
format: html
editor: visual
jupyter: python3
---

## Configuration

```{r, setup, include = FALSE}
knitr::opts_knit$set(root.dir = 'G:/My Drive/Residency/Research/Lab - Damisah/Project - Sleep/Revisions')
```

```{r}
library(tidyverse)
library(umap)
library(dbscan)
library(RColorBrewer)
```

## Parameters

Note that the HDBSCAN parameter for the minimum number of points in a cluster ("min_pts") must be manually optimized based on the total number of units in each recording. In other words, recordings with fewer units may be unclusterable without a smaller value for the "min_pts" parameter.

```{r}
spike_epoch_path <- 'Data/S01_Feb02_epochs_10s_spikes.csv'
sw_corr_path <- 'Data/S01_Feb02_correlation_10s_sw.csv'
swa_corr_path <- 'Data/S01_Feb02_correlation_10s_swa.csv'
hdbscan_spike_path <- 'Data/S01_Feb02_hdbscan_spike_10s.csv'
spike_plot_path <- 'Results/S01_Feb02_mapscan_spike_10s.svg'
sw_plot_path <- 'Results/S01_Feb02_mapscan_sw_10s.svg'
swa_plot_path <- 'Results/S01_Feb02_mapscan_swa_10s.svg'
min_pts = 8 # HDBSCAN parameter

# spike_epoch_path <- 'Data/S05_Jul11_epochs_10s_spikes.csv'
# sw_corr_path <- 'Data/S05_Jul11_correlation_10s_sw.csv'
# swa_corr_path <- 'Data/S05_Jul11_correlation_10s_swa.csv'
# hdbscan_spike_path <- 'Data/S05_Jul11_hdbscan_spike_10s.csv'
# spike_plot_path <- 'Results/S05_Jul11_mapscan_spike_10s.svg'
# sw_plot_path <- 'Results/S05_Jul11_mapscan_sw_10s.svg'
# swa_plot_path <- 'Results/S05_Jul11_mapscan_swa_10s.svg'
# min_pts = 3 # vs. 6 # HDBSCAN parameter

# spike_epoch_path <- 'Data/S05_Jul12_epochs_10s_spikes.csv'
# sw_corr_path <- 'Data/S05_Jul12_correlation_10s_sw.csv'
# swa_corr_path <- 'Data/S05_Jul12_correlation_10s_swa.csv'
# hdbscan_spike_path <- 'Data/S05_Jul12_hdbscan_spike_10s.csv'
# spike_plot_path <- 'Results/S05_Jul12_mapscan_spike_10s.svg'
# sw_plot_path <- 'Results/S05_Jul12_mapscan_sw_10s.svg'
# swa_plot_path <- 'Results/S05_Jul12_mapscan_swa_10s.svg'
# min_pts = 3 # HDBSCAN parameter

# spike_epoch_path <- 'Data/S05_Jul13_epochs_10s_spikes.csv'
# sw_corr_path <- 'Data/S05_Jul13_correlation_10s_sw.csv'
# swa_corr_path <- 'Data/S05_Jul13_correlation_10s_swa.csv'
# hdbscan_spike_path <- 'Data/S05_Jul13_hdbscan_spike_10s.csv'
# spike_plot_path <- 'Results/S05_Jul13_mapscan_spike_10s.svg'
# sw_plot_path <- 'Results/S05_Jul13_mapscan_sw_10s.svg'
# swa_plot_path <- 'Results/S05_Jul13_mapscan_swa_10s.svg'
# min_pts = 3 # HDBSCAN parameter

unit_regions <- c('CLA', 'ACC', 'AMY')
unit_colors <- c('#E28DB8', '#A67A77', '#7BA387')
```

```{r}
# Make UMAP reproducible (it is stochastic)
set.seed(42)
```

## Munging

```{r}
spike_data <- 
  read.csv(spike_epoch_path) %>%
  filter(unit_region %in% unit_regions) %>%
  group_by(unit_id) %>%
  mutate(norm_fr = scale(fr, 
                         center = TRUE, 
                         scale = TRUE)) %>%
  ungroup() %>%
  pivot_wider(id_cols = c(unit_id, unit_laterality, unit_region),
              names_from = epoch,
              values_from = norm_fr)

spike_meta <- 
  spike_data %>%
  select(unit_id, unit_laterality, unit_region) %>%
  rownames_to_column('id') %>%
  mutate(id = as.numeric(id))

spike_data <- spike_data[,-c(1:3)]
```

```{r}
sw_data <-
  read.csv(sw_corr_path) %>%
  filter(unit_region %in% unit_regions) %>%
  select(unit_id, unit_region, unit_laterality, channel, rho) %>%
  mutate(corr = scale(rho, center = TRUE, scale = TRUE)) %>%
  pivot_wider(id_cols = c(unit_id, unit_region, unit_laterality),
              names_from = channel,
              values_from = corr)

mean_cols <- colnames(sw_data)[!colnames(sw_data) %in% c("unit_id", "unit_laterality", "unit_region")]

sw_meta <-
  sw_data %>%
  mutate(corr_mean = round(rowMeans(sw_data[,mean_cols]), digits = 2)) %>%
  select(unit_id, unit_laterality, unit_region, corr_mean) %>%
  rownames_to_column('id') %>%
  mutate(id = as.numeric(id))

sw_data <- sw_data[,-c(1:3)]
```

```{r}
swa_data <- 
  read.csv(swa_corr_path) %>%
  filter(unit_region %in% unit_regions) %>%
  select(unit_id, unit_region, unit_laterality, channel, rho) %>%
  mutate(corr = scale(rho, center = TRUE, scale = TRUE)) %>%
  pivot_wider(id_cols = c(unit_id, unit_region, unit_laterality),
              names_from = channel,
              values_from = corr)

mean_cols <- colnames(swa_data)[!colnames(swa_data) %in% c("unit_id", "unit_laterality", "unit_region")]

swa_meta <- 
  swa_data %>%
  mutate(corr_mean = round(rowMeans(swa_data[,mean_cols]), digits = 2)) %>%
  select(unit_id, unit_laterality, unit_region, corr_mean) %>%
  rownames_to_column('id') %>%
  mutate(id = as.numeric(id))

swa_data <- swa_data[,-c(1:3)]
```

## HDBSCAN

```{r}
# HDBSCAN prior to dimensionality reduction
hdbscan_groups <- hdbscan(spike_data, minPts = min_pts)

# Extract clusters
spike_cluster <- hdbscan_groups$cluster
spike_cluster <- as.data.frame(spike_cluster)
colnames(spike_cluster) <- c('cluster')

# Extract membership probability (%)
spike_cluster$cluster_prob <- hdbscan_groups$membership_prob

# Set index to ID for merging with original data
spike_cluster <-
  spike_cluster %>%
  rownames_to_column('id') %>%
  mutate(id = as.numeric(id))
```

```{r}
# Assign HDBSCAN clusters to a shape
# Note that cluster == 0 indicates an unclusterable data point
spike_cluster <- spike_cluster %>%
  mutate(cluster_shape = case_when(
    cluster == 0 ~ 13,  # Circle with X (unclusterable)
    cluster == 1 ~ 17,  # Triangle
    cluster == 2 ~ 15,  # Square
    cluster == 3 ~ 19,  # Circle
    cluster == 4 ~ 18   # Diamond
  ))
```

## UMAP

```{r}
# UMAP parameters (optional)
custom <- umap.defaults
custom$n_components = 2
```

```{r}
# UMAP
map <- umap(spike_data, config = custom)

# Format & merge with meta-data
spike_map <- 
  map$layout %>%
  as.data.frame() %>%
  rename(UMAP1 = 'V1',
         UMAP2 = 'V2') %>%
  rownames_to_column('id') %>%
  mutate(id = as.numeric(id)) %>%
  inner_join(spike_meta, by = 'id') %>%
  inner_join(spike_cluster, by = 'id') %>%
  mutate(unit_region = factor(unit_region, levels = unit_regions))

# Export spike HDBSCAN + UMAP data
write.csv(spike_map, hdbscan_spike_path, row.names = FALSE)
```

```{r}
# UMAP
map <- umap(sw_data)

# Format & merge with meta-data
sw_map <-
  map$layout %>%
  as.data.frame() %>%
  rename(UMAP1 = 'V1',
         UMAP2 = 'V2') %>%
  rownames_to_column('id') %>%
  mutate(id = as.numeric(id)) %>%
  inner_join(sw_meta, by = 'id') %>%
  inner_join(spike_cluster, by = 'id') %>%
  mutate(unit_region = factor(unit_region, levels = unit_regions))
```

```{r}
# UMAP
map <- umap(swa_data)

# Format & merge with meta-data
swa_map <- 
  map$layout %>%
  as.data.frame() %>%
  rename(UMAP1 = 'V1',
         UMAP2 = 'V2') %>%
  rownames_to_column('id') %>%
  mutate(id = as.numeric(id)) %>%
  inner_join(swa_meta, by = 'id') %>%
  inner_join(spike_cluster, by = 'id') %>%
  mutate(unit_region = factor(unit_region, levels = unit_regions))
```

## Spike Plot

```{r}
spike_plot <- 
  ggplot(data = spike_map,
       aes(x = UMAP1, 
           y = UMAP2)) + 
  geom_point(aes(color = unit_region, 
                 shape = I(cluster_shape)),
             size = 5) + 
  #scale_color_identity() + 
  scale_shape_identity() + 
  scale_discrete_manual(values = unit_colors,
                       aesthetics = c('color')) +
  theme_bw() +
  theme(legend.position = 'none',
        legend.title = element_blank(),
        legend.text = element_text(size = 16),
        axis.title = element_text(size = 14),
        axis.text = element_text(size = 10),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank())

spike_plot
```

```{r}
spike_plot

ggsave(file = spike_plot_path, 
       width = 4.5, height = 4, 
       dpi = 300, limitsize = FALSE,
       bg = 'transparent')
```

## SW Plot

```{r}
sw_plot <-
  ggplot(data = sw_map,
       aes(x = UMAP1,
           y = UMAP2,
           color = unit_region)) +
  geom_point(size = 5, aes(shape = I(cluster_shape), 
                           alpha = sw_meta$corr_mean)) +
  scale_shape_manual(values = c('square' = 15, 'triangle' = 17)) +
  scale_discrete_manual(values = unit_colors,
                        aesthetics = c('color')) +
  theme_bw() +
  theme(legend.position = 'none',
        legend.title = element_blank(),
        legend.text = element_text(size = 16),
        axis.title = element_text(size = 14),
        axis.text = element_text(size = 10),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank())
```

```{r}
sw_plot

ggsave(file = sw_plot_path,
       width = 4.5, height = 4,
       dpi = 300, limitsize = FALSE,
       bg = 'transparent')
```

## SWA Plot

```{r}
swa_plot <- 
  ggplot(data = swa_map,
       aes(x = UMAP1, 
           y = UMAP2,
           color = unit_region)) +
  geom_point(size = 5, aes(shape = I(cluster_shape), 
                           alpha = sw_meta$corr_mean)) + 
  scale_shape_manual(values = c('square' = 15, 'triangle' = 17)) + 
  scale_discrete_manual(values = unit_colors,
                        aesthetics = c('color')) + 
  theme_bw() +
  theme(legend.position = 'none',
        legend.title = element_blank(),
        legend.text = element_text(size = 16),
        axis.title = element_text(size = 14),
        axis.text = element_text(size = 10),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank())
```

```{r}
swa_plot

ggsave(file = swa_plot_path, 
       width = 4.5, height = 4, 
       dpi = 300, limitsize = FALSE,
       bg = 'transparent')
```
